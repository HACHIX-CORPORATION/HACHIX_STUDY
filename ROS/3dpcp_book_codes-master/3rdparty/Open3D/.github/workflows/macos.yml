name: MacOS

on:
  workflow_dispatch:
    inputs:
      developer_build:
        description: 'Set to OFF for Release wheels'
        required: false
        default: 'ON'

  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize]  # Rebuild on new pushes to PR

env:
  # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
  NPROC: 3

jobs:
  MacOS:
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        BUILD_ML_OPS: [ON, OFF]
    env:
      SHARED: OFF
      BUILD_CUDA_MODULE: OFF
      BUILD_TENSORFLOW_OPS: ${{ matrix.BUILD_ML_OPS }}
      BUILD_PYTORCH_OPS: ${{ matrix.BUILD_ML_OPS }}
      LOW_MEM_USAGE: ON
    steps:
      - name: Cancel outdated
        uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ github.token }}

      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Setup cache
        uses: actions/cache@v2
        with:
          # Ref: https://github.com/apache/incubator-mxnet/pull/18459/files
          path: ~/.ccache
          # We include the commit sha in the cache key, as new cache entries are
          # only created if there is no existing entry for the key yet.
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          # Restore any ccache cache entry, if none for
          # ${{ runner.os }}-ccache-${{ github.sha }} exists.
          # Common prefix will be used so that ccache can be used across commits.
          restore-keys: |
            ${{ runner.os }}-ccache
      - name: Set up Python version
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Install dependencies
        run: |
          brew install ccache
          ccache -M 2G  # See .github/workflows/readme.md for ccache strategy.
      - name: Config and build
        run: |
          PATH=/usr/local/var/homebrew/linked/ccache/libexec:$PATH
          ccache -s
          ./util/run_ci.sh
          ccache -s

  build-wheel:
    name: Build wheel
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      # https://github.community/t/how-to-conditionally-include-exclude-items-in-matrix-eg-based-on-branch/16853/6
      matrix:
        python_version: [3.6, 3.7, 3.8, 3.9]
        is_master:
          - ${{ github.ref == 'refs/heads/master' }}
        exclude:
          - is_master: false
            python_version: 3.7
          - is_master: false
            python_version: 3.8
          - is_master: false
            python_version: 3.9

    env:
      BUILD_CUDA_MODULE: OFF
      OPEN3D_ML_ROOT: ${{ github.workspace }}/Open3D-ML
      DEVELOPER_BUILD: ${{ github.event.inputs.developer_build || 'ON' }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Checkout Open3D-ML source code
        uses: actions/checkout@v2
        with:
          repository: isl-org/Open3D-ML
          path: ${{ env.OPEN3D_ML_ROOT }}

      - name: Setup cache
        uses: actions/cache@v2
        with:
          # Ref: https://github.com/apache/incubator-mxnet/pull/18459/files
          path: ~/.ccache
          # We include the commit sha in the cache key, as new cache entries are
          # only created if there is no existing entry for the key yet.
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          # Restore any ccache cache entry, if none for
          # ${{ runner.os }}-ccache-${{ github.sha }} exists.
          # Common prefix will be used so that ccache can be used across commits.
          restore-keys: |
            ${{ runner.os }}-ccache
      - name: Set up Python version
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: false
          python-version: ${{ matrix.python_version }}
      - name: Install dependencies
        shell: bash -l {0}
        run: |
          brew install ccache
          ccache -M 2G  # See .github/workflows/readme.md for ccache strategy.
          echo
          source util/ci_utils.sh
          install_python_dependencies with-conda
          echo
          echo -n "Using conda"
          conda info
          echo "Using python: $(which python)"
          python --version
          echo -n "Using pip: "
          python -m pip --version
          echo "Using cmake: $(which cmake)"
          cmake --version

      - name: Config and build wheel
        shell: bash -l {0}
        run: |
          PATH=/usr/local/var/homebrew/linked/ccache/libexec:$PATH
          ccache -s
          source util/ci_utils.sh
          build_pip_conda_package
          ccache -s
          PIP_PKG_NAME="$(basename build/lib/python_package/pip_package/open3d*.whl)"
          echo "PIP_PKG_NAME=$PIP_PKG_NAME" >> $GITHUB_ENV
          CONDA_PKG_NAME="$(basename build/lib/python_package/conda_package/osx-64/open3d*.tar.bz2)"
          echo "CONDA_PKG_NAME=$CONDA_PKG_NAME" >> $GITHUB_ENV

      - name: Upload wheel
        uses: actions/upload-artifact@v2
        with:
          name: open3d_macosx_x86_64_wheels
          path: |
            build/lib/python_package/pip_package/${{ env.PIP_PKG_NAME }}
            build/lib/python_package/conda_package/osx-64/${{ env.CONDA_PKG_NAME }}
          if-no-files-found: error

      - name: GCloud CLI setup
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: google-github-actions/setup-gcloud@master
        with:
          version: ${{ env.GCE_CLI_GHA_VERSION }}
          service_account_key: ${{ secrets.GCE_SA_KEY_GPU_CI }}
          project_id: ${{ secrets.GCE_DOCS_PROJECT }}
          export_default_credentials: true

      - name: Upload wheel to GCS bucket
        if: ${{ github.ref == 'refs/heads/master' }}
        env:
          python_version: ${{ matrix.python_version }}
        run: |
          PYTAG="-cp$(echo ${{ env.python_version }} | tr -d '.')"
          gsutil cp build/lib/python_package/pip_package/${{ env.PIP_PKG_NAME }} gs://open3d-releases-master/python-wheels/
          echo "Download pip package at: https://storage.googleapis.com/open3d-releases-master/python-wheels/${{ env.PIP_PKG_NAME }}"
          gsutil cp build/lib/python_package/conda_package/osx-64/${{ env.CONDA_PKG_NAME }} gs://open3d-releases-master/conda_package/osx-64/
          echo "Download conda package at: https://storage.googleapis.com/open3d-releases-master/conda_package/osx-64/${{ env.CONDA_PKG_NAME }}"

  test-wheel:
    name: Test wheel
    runs-on: macos-10.15
    needs: [build-wheel]
    strategy:
      fail-fast: false
      matrix:
        python_version: [3.6, 3.7, 3.8, 3.9]
        is_master:
          - ${{ github.ref == 'refs/heads/master' }}
        exclude:
          - is_master: false
            python_version: 3.7
          - is_master: false
            python_version: 3.8
          - is_master: false
            python_version: 3.9

    env:
      OPEN3D_ML_ROOT: ${{ github.workspace }}/Open3D-ML
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Checkout Open3D-ML source code
        uses: actions/checkout@v2
        with:
          repository: isl-org/Open3D-ML
          path: ${{ env.OPEN3D_ML_ROOT }}

      - name: Download wheels
        uses: actions/download-artifact@v2
        # See https://github.com/dawidd6/action-download-artifact for more
        # flexible artifact download options
        with:
          name: open3d_macosx_x86_64_wheels

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}

      - name: Test Python package
        run: |
          python -V
          source util/ci_utils.sh
          pi_tag=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          test_wheel pip_package/open3d*-"$pi_tag"-*.whl

      - name: Run Python unit tests (benchmarks)
        run: |
          source util/ci_utils.sh
          echo "Running Open3D python tests..."
          run_python_tests

  ready-docs:
    name: Ready docs archive
    # no need to run on macOS
    runs-on: ubuntu-18.04
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [build-wheel]
    steps:
      - name: GCloud CLI setup
        uses: google-github-actions/setup-gcloud@master
        with:
          version: ${{ env.GCE_CLI_GHA_VERSION }}
          service_account_key: ${{ secrets.GCE_SA_KEY_GPU_CI }}
          project_id: ${{ secrets.GCE_DOCS_PROJECT }}
          export_default_credentials: true
      - name: Check wheels and ready documentation archive
        run: |
            touch marker_file
            gsutil cp marker_file gs://open3d-docs/${{ github.sha }}_ready_macos
            if [ $(gsutil ls gs://open3d-docs/${{ github.sha }}_ready* | wc -l)\
                -eq 4 ]; then
                echo "All wheels and docs available. Making docs ready."
                # Remove all marker files: Note _ at end of pattern.
                gsutil rm gs://open3d-docs/${{ github.sha }}_ready_*
                # Rename docs archive:
                gsutil mv gs://open3d-docs/${{ github.sha }}_ready.tar.gz \
                    gs://open3d-docs/${{ github.sha }}.tar.gz
            else
                echo "All wheels / docs not available yet. Docs not ready."
            fi
